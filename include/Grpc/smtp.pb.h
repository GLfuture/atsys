// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smtp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smtp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smtp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smtp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smtp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace SMTP {
namespace Email_Msg {
class SMTP_Req;
struct SMTP_ReqDefaultTypeInternal;
extern SMTP_ReqDefaultTypeInternal _SMTP_Req_default_instance_;
class SMTP_Rsp;
struct SMTP_RspDefaultTypeInternal;
extern SMTP_RspDefaultTypeInternal _SMTP_Rsp_default_instance_;
}  // namespace Email_Msg
}  // namespace SMTP
PROTOBUF_NAMESPACE_OPEN
template<> ::SMTP::Email_Msg::SMTP_Req* Arena::CreateMaybeMessage<::SMTP::Email_Msg::SMTP_Req>(Arena*);
template<> ::SMTP::Email_Msg::SMTP_Rsp* Arena::CreateMaybeMessage<::SMTP::Email_Msg::SMTP_Rsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SMTP {
namespace Email_Msg {

// ===================================================================

class SMTP_Req final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SMTP.Email_Msg.SMTP_Req) */ {
 public:
  inline SMTP_Req() : SMTP_Req(nullptr) {}
  ~SMTP_Req() override;
  explicit constexpr SMTP_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SMTP_Req(const SMTP_Req& from);
  SMTP_Req(SMTP_Req&& from) noexcept
    : SMTP_Req() {
    *this = ::std::move(from);
  }

  inline SMTP_Req& operator=(const SMTP_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMTP_Req& operator=(SMTP_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SMTP_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const SMTP_Req* internal_default_instance() {
    return reinterpret_cast<const SMTP_Req*>(
               &_SMTP_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SMTP_Req& a, SMTP_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(SMTP_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMTP_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SMTP_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SMTP_Req>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SMTP_Req& from);
  void MergeFrom(const SMTP_Req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SMTP_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMTP.Email_Msg.SMTP_Req";
  }
  protected:
  explicit SMTP_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailsFieldNumber = 1,
    kContentFieldNumber = 2,
    kSubjectFieldNumber = 3,
    kContentTypeFieldNumber = 4,
    kCharsetFieldNumber = 5,
  };
  // repeated string emails = 1;
  int emails_size() const;
  private:
  int _internal_emails_size() const;
  public:
  void clear_emails();
  const std::string& emails(int index) const;
  std::string* mutable_emails(int index);
  void set_emails(int index, const std::string& value);
  void set_emails(int index, std::string&& value);
  void set_emails(int index, const char* value);
  void set_emails(int index, const char* value, size_t size);
  std::string* add_emails();
  void add_emails(const std::string& value);
  void add_emails(std::string&& value);
  void add_emails(const char* value);
  void add_emails(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& emails() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_emails();
  private:
  const std::string& _internal_emails(int index) const;
  std::string* _internal_add_emails();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string subject = 3;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string content_type = 4;
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // string charset = 5;
  void clear_charset();
  const std::string& charset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_charset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_charset();
  PROTOBUF_NODISCARD std::string* release_charset();
  void set_allocated_charset(std::string* charset);
  private:
  const std::string& _internal_charset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_charset(const std::string& value);
  std::string* _internal_mutable_charset();
  public:

  // @@protoc_insertion_point(class_scope:SMTP.Email_Msg.SMTP_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> emails_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smtp_2eproto;
};
// -------------------------------------------------------------------

class SMTP_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SMTP.Email_Msg.SMTP_Rsp) */ {
 public:
  inline SMTP_Rsp() : SMTP_Rsp(nullptr) {}
  ~SMTP_Rsp() override;
  explicit constexpr SMTP_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SMTP_Rsp(const SMTP_Rsp& from);
  SMTP_Rsp(SMTP_Rsp&& from) noexcept
    : SMTP_Rsp() {
    *this = ::std::move(from);
  }

  inline SMTP_Rsp& operator=(const SMTP_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMTP_Rsp& operator=(SMTP_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SMTP_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SMTP_Rsp* internal_default_instance() {
    return reinterpret_cast<const SMTP_Rsp*>(
               &_SMTP_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SMTP_Rsp& a, SMTP_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SMTP_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMTP_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SMTP_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SMTP_Rsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SMTP_Rsp& from);
  void MergeFrom(const SMTP_Rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SMTP_Rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMTP.Email_Msg.SMTP_Rsp";
  }
  protected:
  explicit SMTP_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // uint32 code = 1;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SMTP.Email_Msg.SMTP_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smtp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SMTP_Req

// repeated string emails = 1;
inline int SMTP_Req::_internal_emails_size() const {
  return emails_.size();
}
inline int SMTP_Req::emails_size() const {
  return _internal_emails_size();
}
inline void SMTP_Req::clear_emails() {
  emails_.Clear();
}
inline std::string* SMTP_Req::add_emails() {
  std::string* _s = _internal_add_emails();
  // @@protoc_insertion_point(field_add_mutable:SMTP.Email_Msg.SMTP_Req.emails)
  return _s;
}
inline const std::string& SMTP_Req::_internal_emails(int index) const {
  return emails_.Get(index);
}
inline const std::string& SMTP_Req::emails(int index) const {
  // @@protoc_insertion_point(field_get:SMTP.Email_Msg.SMTP_Req.emails)
  return _internal_emails(index);
}
inline std::string* SMTP_Req::mutable_emails(int index) {
  // @@protoc_insertion_point(field_mutable:SMTP.Email_Msg.SMTP_Req.emails)
  return emails_.Mutable(index);
}
inline void SMTP_Req::set_emails(int index, const std::string& value) {
  emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SMTP.Email_Msg.SMTP_Req.emails)
}
inline void SMTP_Req::set_emails(int index, std::string&& value) {
  emails_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SMTP.Email_Msg.SMTP_Req.emails)
}
inline void SMTP_Req::set_emails(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  emails_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SMTP.Email_Msg.SMTP_Req.emails)
}
inline void SMTP_Req::set_emails(int index, const char* value, size_t size) {
  emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SMTP.Email_Msg.SMTP_Req.emails)
}
inline std::string* SMTP_Req::_internal_add_emails() {
  return emails_.Add();
}
inline void SMTP_Req::add_emails(const std::string& value) {
  emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SMTP.Email_Msg.SMTP_Req.emails)
}
inline void SMTP_Req::add_emails(std::string&& value) {
  emails_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SMTP.Email_Msg.SMTP_Req.emails)
}
inline void SMTP_Req::add_emails(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  emails_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SMTP.Email_Msg.SMTP_Req.emails)
}
inline void SMTP_Req::add_emails(const char* value, size_t size) {
  emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SMTP.Email_Msg.SMTP_Req.emails)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SMTP_Req::emails() const {
  // @@protoc_insertion_point(field_list:SMTP.Email_Msg.SMTP_Req.emails)
  return emails_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SMTP_Req::mutable_emails() {
  // @@protoc_insertion_point(field_mutable_list:SMTP.Email_Msg.SMTP_Req.emails)
  return &emails_;
}

// string content = 2;
inline void SMTP_Req::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& SMTP_Req::content() const {
  // @@protoc_insertion_point(field_get:SMTP.Email_Msg.SMTP_Req.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SMTP_Req::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMTP.Email_Msg.SMTP_Req.content)
}
inline std::string* SMTP_Req::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:SMTP.Email_Msg.SMTP_Req.content)
  return _s;
}
inline const std::string& SMTP_Req::_internal_content() const {
  return content_.Get();
}
inline void SMTP_Req::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SMTP_Req::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SMTP_Req::release_content() {
  // @@protoc_insertion_point(field_release:SMTP.Email_Msg.SMTP_Req.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SMTP_Req::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMTP.Email_Msg.SMTP_Req.content)
}

// string subject = 3;
inline void SMTP_Req::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& SMTP_Req::subject() const {
  // @@protoc_insertion_point(field_get:SMTP.Email_Msg.SMTP_Req.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SMTP_Req::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMTP.Email_Msg.SMTP_Req.subject)
}
inline std::string* SMTP_Req::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:SMTP.Email_Msg.SMTP_Req.subject)
  return _s;
}
inline const std::string& SMTP_Req::_internal_subject() const {
  return subject_.Get();
}
inline void SMTP_Req::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SMTP_Req::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SMTP_Req::release_subject() {
  // @@protoc_insertion_point(field_release:SMTP.Email_Msg.SMTP_Req.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SMTP_Req::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subject_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMTP.Email_Msg.SMTP_Req.subject)
}

// string content_type = 4;
inline void SMTP_Req::clear_content_type() {
  content_type_.ClearToEmpty();
}
inline const std::string& SMTP_Req::content_type() const {
  // @@protoc_insertion_point(field_get:SMTP.Email_Msg.SMTP_Req.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SMTP_Req::set_content_type(ArgT0&& arg0, ArgT... args) {
 
 content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMTP.Email_Msg.SMTP_Req.content_type)
}
inline std::string* SMTP_Req::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:SMTP.Email_Msg.SMTP_Req.content_type)
  return _s;
}
inline const std::string& SMTP_Req::_internal_content_type() const {
  return content_type_.Get();
}
inline void SMTP_Req::_internal_set_content_type(const std::string& value) {
  
  content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SMTP_Req::_internal_mutable_content_type() {
  
  return content_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SMTP_Req::release_content_type() {
  // @@protoc_insertion_point(field_release:SMTP.Email_Msg.SMTP_Req.content_type)
  return content_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SMTP_Req::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMTP.Email_Msg.SMTP_Req.content_type)
}

// string charset = 5;
inline void SMTP_Req::clear_charset() {
  charset_.ClearToEmpty();
}
inline const std::string& SMTP_Req::charset() const {
  // @@protoc_insertion_point(field_get:SMTP.Email_Msg.SMTP_Req.charset)
  return _internal_charset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SMTP_Req::set_charset(ArgT0&& arg0, ArgT... args) {
 
 charset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMTP.Email_Msg.SMTP_Req.charset)
}
inline std::string* SMTP_Req::mutable_charset() {
  std::string* _s = _internal_mutable_charset();
  // @@protoc_insertion_point(field_mutable:SMTP.Email_Msg.SMTP_Req.charset)
  return _s;
}
inline const std::string& SMTP_Req::_internal_charset() const {
  return charset_.Get();
}
inline void SMTP_Req::_internal_set_charset(const std::string& value) {
  
  charset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SMTP_Req::_internal_mutable_charset() {
  
  return charset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SMTP_Req::release_charset() {
  // @@protoc_insertion_point(field_release:SMTP.Email_Msg.SMTP_Req.charset)
  return charset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SMTP_Req::set_allocated_charset(std::string* charset) {
  if (charset != nullptr) {
    
  } else {
    
  }
  charset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charset,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (charset_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    charset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMTP.Email_Msg.SMTP_Req.charset)
}

// -------------------------------------------------------------------

// SMTP_Rsp

// uint32 code = 1;
inline void SMTP_Rsp::clear_code() {
  code_ = 0u;
}
inline uint32_t SMTP_Rsp::_internal_code() const {
  return code_;
}
inline uint32_t SMTP_Rsp::code() const {
  // @@protoc_insertion_point(field_get:SMTP.Email_Msg.SMTP_Rsp.code)
  return _internal_code();
}
inline void SMTP_Rsp::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void SMTP_Rsp::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SMTP.Email_Msg.SMTP_Rsp.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Email_Msg
}  // namespace SMTP

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smtp_2eproto
